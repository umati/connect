/******************************************************************************
**
** <auto-generated>
**     This code was generated by a tool: UaModeler
**     Runtime Version: 1.7.0, using .NET Server 4.1.0 template (version 0)
**
**     This is a template file that was generated for your convenience.
**     This file will not be overwritten when generating code again.
**     ADD YOUR IMPLEMTATION HERE!
** </auto-generated>
**
** Copyright (c) 2006-2025 Unified Automation GmbH All rights reserved.
**
** Software License Agreement ("SLA") Version 2.8
**
** Unless explicitly acquired and licensed from Licensor under another
** license, the contents of this file are subject to the Software License
** Agreement ("SLA") Version 2.8, or subsequent versions
** as allowed by the SLA, and You may not copy or use this file in either
** source code or executable form, except in compliance with the terms and
** conditions of the SLA.
**
** All software distributed under the SLA is provided strictly on an
** "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
** AND LICENSOR HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT
** LIMITATION, ANY WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
** PURPOSE, QUIET ENJOYMENT, OR NON-INFRINGEMENT. See the SLA for specific
** language governing rights and limitations under the SLA.
**
** Project: .NET OPC UA SDK information model for namespace http://ifw.uni-hannover.de/umatiConnectDMG/
**
** Description: OPC Unified Architecture Software Development Kit.
**
** The complete license agreement can be found here:
** http://unifiedautomation.com/License/SLA/2.8/
**
** Created: 21.03.2025
**
******************************************************************************/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using UnifiedAutomation.UaBase;
using UnifiedAutomation.UaServer;
using UnifiedAutomation.UaSchema;

namespace ifw.umatiConnectDMG
{
    class Program
    {
        static void Main(string[] args)
        {
            try
            {
                // There is no license file configured in UaModeler.
                // After you have added a license file to the project you can add the license with the following
                // line of code.
                // ApplicationLicenseManager.AddProcessLicenses(System.Reflection.Assembly.GetExecutingAssembly(), "License.lic");

                // Uncomment the following line to use the in memory configuration instead of app.config
                // ConfigureOpcUaApplicationFromCode();

                // Start the server.
                ServerManager server = new umatiConnectDMGServerManager();
                var application = ApplicationInstanceBase.Default;
                application.SecurityProvider = new BouncyCastleSecurityProvider();
                application.AutoCreateCertificate = true;

                application.UntrustedCertificate += (s, e) =>
                {
                    if (e.ValidationError.CodeBits == StatusCodes.BadCertificateUntrusted)
                    {
                        Console.WriteLine($"Untrusted certificate {e.Certificate.SubjectName}");
                        Console.WriteLine($"Move certificate {e.Certificate.CommonName} [{e.Certificate.Thumbprint}].der to {e.TrustedStore.StorePath} to trust it.");
                    }
                    else
                    {
                        Console.WriteLine($"Validation error {e.ValidationError} for certificate {e.Certificate.SubjectName}");
                    }
                };

                application.Start(server, null, server);

                Console.WriteLine("Endpoint URL: opc.tcp://localhost:48030");
                // Block until the server exits.
                Console.WriteLine("Press <enter> to exit the program.");
                Console.ReadLine();
                // Stop the server.
                server.Stop();
            }
            catch (Exception e)
            {
                Console.WriteLine("ERROR: {0}", e.Message);
                Console.WriteLine("Press <enter> to exit the program.");
                Console.ReadLine();
            }
        }

        static void ConfigureOpcUaApplicationFromCode()
        {
            // fill in the application settings in code
            // The configuration settings are typically provided by another module
            // of the application or loaded from a data base. In this example the
            // settings are hardcoded
            var application = new ConfigurationInMemory();

            // ***********************************************************************
            // standard configuration options

            // general application identification settings
            application.ApplicationName = "umatiConnectDMG";
            application.ApplicationUri = "urn:localhost:ifw:umatiConnectDMG";
            application.ApplicationType = UnifiedAutomation.UaSchema.ApplicationType.Server_0;
            application.ProductName = "umatiConnectDMG";

            // configure certificate stores
            application.ApplicationCertificate = new UnifiedAutomation.UaSchema.CertificateIdentifier()
            {
                StoreType = "Directory",
                StorePath = @"%CommonApplicationData%\ifw\umatiConnectDMG\pki\own",
                SubjectName = "CN=GettingStartedServer/O=ifw/DC=localhost",
            };

            application.TrustedCertificateStore = new UnifiedAutomation.UaSchema.CertificateStoreIdentifier()
            {
                StoreType = "Directory",
                StorePath = @"%CommonApplicationData%\ifw\umatiConnectDMG\pki\trusted",
            };

            application.IssuerCertificateStore = new UnifiedAutomation.UaSchema.CertificateStoreIdentifier()
            {
                StoreType = "Directory",
                StorePath = @"%CommonApplicationData%\ifw\umatiConnectDMG\pki\issuers",
            };

            application.RejectedCertificatesStore = new UnifiedAutomation.UaSchema.CertificateStoreIdentifier()
            {
                StoreType = "Directory",
                StorePath = @"%CommonApplicationData%\ifw\umatiConnectDMG\pki\rejected",
            };

            // configure endpoints
            application.BaseAddresses = new UnifiedAutomation.UaSchema.ListOfBaseAddresses()
            {
                "opc.tcp://localhost:48030"
            };

            application.SecurityProfiles = new ListOfSecurityProfiles()
            {
                new SecurityProfile() { ProfileUri = SecurityProfiles.Basic256Sha256, Enabled = true },
                new SecurityProfile() { ProfileUri = SecurityProfiles.Aes128Sha256RsaOaep, Enabled = true },
                new SecurityProfile() { ProfileUri = SecurityProfiles.Aes256Sha256RsaPss, Enabled = true },
                // This SecurityProfile is enabled for testing purposes. It shall NOT be enabled in end user products.
                new SecurityProfile() { ProfileUri = SecurityProfiles.None, Enabled = true },
            };
            // ***********************************************************************

            // ***********************************************************************
            // extended configuration options

            // trace settings
            application.TraceSettings = new TraceSettings()
            {
                MasterTraceEnabled = false,
                DefaultTraceLevel = UnifiedAutomation.UaSchema.TraceLevel.Info,
                TraceFile = @"%CommonApplicationData%\ifw\logs\umatiConnectDMG.log.txt",
                MaxLogFileBackups = 3,
                ModuleSettings = new ModuleTraceSettings[]
                {
                    new ModuleTraceSettings() { ModuleName = "UnifiedAutomation.Stack", TraceEnabled = true },
                    new ModuleTraceSettings() { ModuleName = "UnifiedAutomation.Server", TraceEnabled = true },
                }
            };

            // Installation settings
            application.InstallationSettings = new InstallationSettings()
            {
                GenerateCertificateIfNone = true,
                DeleteCertificateOnUninstall = true,
            };

            application.ServerSettings = new UnifiedAutomation.UaSchema.ServerSettings()
            {
                ProductUri = "urn:ifw:umatiConnectDMG",
                ProductName = "umatiConnectDMG",
                DiscoveryRegistration = new DiscoveryRegistrationSettings()
                {
                    Enabled = false
                },
                UserIdentity = new UserIdentitySettings()
                {
                    EnableAnonymous = true,
                },
                Capabilities = new string[]
                {
                    "DA",
                },
            };
            // ***********************************************************************

            // set the configuration for the application (must be called before start to have any effect).
            // these settings are discarded if the /configFile flag is specified on the command line.
            ApplicationInstanceBase.Default.SetApplicationSettings(application);
        }
    }
}

